package com.queuemanagementsystem.model;

/**
 * Esta parte representa al administrador responsable de la configuracion y de la gestion del sistema.
 * Se extiende la clase base User.
 */
public class Administrator extends User {
    private int accessLevel;

    /**
     * En esta parte se crea un metodo constructor.
     */
    public Administrator() {
        super();
        this.accessLevel = 1;  // Nivel de acceso por defecto
    }

    /**
     * Constructor parametrizado con campos de usuario base
     *
     * @param id Identificador unico del administrador
     * @param name Nombre completo del administrador
     * @param password Contraseña de autentificacion del administrador
     */
    public Administrator(String id, String name, String password) {
        super(id, name, password);
        this.accessLevel = 1; // Nivel de accesos por defecto
    }

    /**
     * Constructor completo con todos los campos
     *
     * @param id Identificador único del administrador
     * @param name Nombre completo del administrador
     * @param password Contraseña de autenticación del administrador
     * @param accessLevel Nivel de permisos del administrador
     */
    public Administrator(String id, String name, String password, int accessLevel) {
        super(id, name, password);
        this.accessLevel = accessLevel;
    }

    /**
     * Configura una categoría de servicio
     *
     * @param
     * @return true if the category was successfully configured, false otherwise
     */
    public boolean configureCategory(Category category) {
        // This would typically involve validation and persistence logic
        // For now, we'll assume the category is valid if it has a name and prefix
        return category != null && category.getName() != null &&
                !category.getName().isEmpty() && category.getPrefix() != null &&
                !category.getPrefix().isEmpty();
    }

    /**
     * Creates a new service station
     *
     * @param station The station to create
     * @return true if the station was successfully created, false otherwise
     */
    public boolean createStation(Station station) {
        // This would typically involve validation and persistence logic
        return station != null && station.getNumber() > 0;
    }

    /**
     * Removes a service station
     *
     * @param station The station to remove
     * @return true if the station was successfully removed, false otherwise
     */
    public boolean removeStation(Station station) {
        // This would typically involve validation and persistence logic
        return station != null;
    }

    /**
     * Monitors service statistics
     *
     * @return A string with current statistics information
     */
    public String superviseStatistics() {
        // This would typically query the statistics service
        return "Statistics monitoring functionality accessed by administrator: " + getName();
    }

    /**
     * Generates a productivity report
     *
     * @param reportType The type of report to generate (e.g., "DAILY", "WEEKLY")
     * @return A string containing the productivity report
     */
    public String generateProductivityReport(String reportType) {
        // This would typically query the statistics service for specific report data
        StringBuilder report = new StringBuilder();
        report.append("=== ").append(reportType).append(" PRODUCTIVITY REPORT ===\n");
        report.append("Generated by: ").append(getName()).append("\n");
        report.append("Date: ").append(java.time.LocalDate.now()).append("\n");
        report.append("This is a placeholder for the actual report content");

        return report.toString();
    }

    // Getters and Setters

    public int getAccessLevel() {
        return accessLevel;
    }

    public void setAccessLevel(int accessLevel) {
        this.accessLevel = accessLevel;
    }

    /**
     * Returns a string representation of this Administrator
     *
     * @return A string representation
     */
    @Override
    public String toString() {
        return "Administrator{" +
                "id='" + getId() + '\'' +
                ", name='" + getName() + '\'' +
                ", accessLevel=" + accessLevel +
                '}';
    }
}